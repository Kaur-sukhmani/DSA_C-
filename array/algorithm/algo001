// Kadane's Algorithm
// https://practice.geeksforgeeks.org/problems/kadanes-algorithm-1587115620/1
//  Given an array Arr[] of N integers. Find the contiguous sub-array(containing at least one number) which has the maximum sum and return its sum.
//{ Driver Code Starts
#include<bits/stdc++.h>
using namespace std;


// } Driver Code Ends
#include <climits> // Include this for INT_MIN

class Solution{
    public:
    long long maxSubarraySum(int arr[], int n){
        
        // Initialize maxsum to the smallest possible integer value
        long long maxsum = INT_MIN;
        long long currentsum = 0;

        for(int i = 0; i < n; i++){
            currentsum += arr[i];
            if(currentsum > maxsum){
                maxsum = currentsum;
            }
            // Reset currentsum to 0 if it becomes negative
            if(currentsum < 0){
                currentsum = 0;
            }
        }
        return maxsum;
    }
};


//{ Driver Code Starts.

int main()
{
    int t,n;
    
    cin>>t; //input testcases
    while(t--) //while testcases exist
    {
        
        cin>>n; //input size of array
        
        int a[n];
        
        for(int i=0;i<n;i++)
            cin>>a[i]; //inputting elements of array
            
        Solution ob;
        
        cout << ob.maxSubarraySum(a, n) << endl;
    }
}

// } Driver Code Ends
