//  Add Two Numbers
// https://leetcode.com/problems/add-two-numbers/description/
ques
/*
Input: l1 = [2,4,3], l2 = [5,6,4]
Output: [7,0,8]
Explanation: 342 + 465 = 807.
*/


/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    // ListNode* reverseList(ListNode* head) {
    //     ListNode* prev = nullptr;
    //     ListNode* curr = head;
    //     ListNode* next = nullptr;
    //     while (curr != nullptr) {
    //         next = curr->next;
    //         curr->next = prev;
    //         prev = curr;
    //         curr = next;
    //     }
    //     head = prev;
    //     return head;
    // }
    
    // void insertAtTail(ListNode* &head, ListNode* &tail, int val) {
    //     ListNode* temp = new ListNode(val);
    //     //empty list
    //     if (head == nullptr) {
    //         head = temp;
    //         tail = temp;
    //         return;
    //     }
    //     else {
    //         tail->next = temp;
    //         tail = temp;
    //     }
    // }
    
    // ListNode* add(ListNode* first, ListNode* second) {
    //     int carry = 0;
    //     ListNode* ansHead = nullptr;
    //     ListNode* ansTail = nullptr;

    //     while (first != nullptr || second != nullptr || carry != 0) {
    //         int val1 = (first != nullptr) ? first->val : 0;
    //         int val2 = (second != nullptr) ? second->val : 0;

    //         int sum = carry + val1 + val2;
    //         int digit = sum % 10;

    //         // Create node and add it to the answer Linked List
    //         insertAtTail(ansHead, ansTail, digit);

    //         carry = sum / 10;

    //         if (first != nullptr) first = first->next;
    //         if (second != nullptr) second = second->next;
    //     }
    //     return ansHead;
    // }

    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        // Step 1 - Reverse input linked lists
        ListNode* dummyHead = new ListNode(0);
        ListNode* tail = dummyHead;
        int carry = 0;

        while (l1 != nullptr || l2 != nullptr || carry != 0) {
            int digit1;
            if (l1 != nullptr) {
                // If l1 is not null, obtain the value of the current node
                digit1 = l1->val;
            } else {
                // If l1 is null, assign 0 to digit1
                digit1 = 0;
            }

            int digit2;
            if (l2 != nullptr) {
                // If l2 is not null, obtain the value of the current node
                digit2 = l2->val;
            } else {
                // If l2 is null, assign 0 to digit2
                digit2 = 0;
            }
            int sum = digit1 + digit2 + carry;
            int digit = sum % 10;
            carry = sum / 10;

            ListNode* newNode = new ListNode(digit);
            tail->next = newNode;
            tail = tail->next;

            if (l1 != nullptr) {
            // If l1 is not null, move to the next node
            l1 = l1->next;
            } else {
                // If l1 is null, assign nullptr to l1
                l1 = nullptr;
            }

            if (l2 != nullptr) {
                // If l2 is not null, move to the next node
                l2 = l2->next;
            } else {
                // If l2 is null, assign nullptr to l2
                l2 = nullptr;
            }
        }

        ListNode* result = dummyHead->next;
        delete dummyHead;
        return result;
    }
};
