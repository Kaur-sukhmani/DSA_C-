// Creation of Doubly linked list
#include<iostream>
using namespace std;
class Node{
    public:
        int data;
        Node* next;
        Node* prev;

        // constructor
        Node(int d){
            this->data=d;
            this->next=NULL;
            this->prev=NULL;
        }

        // destructor
        ~Node(){
            int val=this->data;
            if(next!=NULL){
                delete next;
                next=NULL;
            }
        
        cout << "memory free for node with data "<< val << endl;
    }
};
// traversing a linked list 
void print(Node *head){
    Node* temp=head;
    while(temp!=NULL){
        cout<<temp->data<<endl;
        temp=temp->next;
    }
}
// gives length of Linked List
int getLength(Node* head){
    int len=0;
    Node* temp=head;
    while(temp!=NULL){
        temp=temp->next;
        len++;
    }
    return len;
}
void insertAtHead(Node* &tail,Node* &head,int d){
    if(head==NULL){
        Node* NewNode = new Node(d);
        head=NewNode;
        tail=NewNode;
    }
    else{
        Node* NewNode=new Node(d);
        head->prev=NewNode;
        NewNode->next=head;
        head=NewNode;   
    }
}
void insertAtTail(Node* &tail,Node* &head,int d){
    Node* NewNode = new Node(d);
    if(tail==NULL){
        head=NewNode;
        tail=NewNode;
    }
    else{
        tail->next=NewNode;
        NewNode->prev=tail;
        tail=NewNode;
    }
}
void insertAtPosition(Node* & tail, Node* &head, int position, int d){
    Node* NewNode = new Node(d);
    
    Node* temp=head;
    int count=1;
    if(position==1){
        insertAtHead(tail,head, d);
        return ;
    }
    // inserting at Last Position
    if(temp -> next == NULL) {
        insertAtTail(tail,head,d);
        return ;
    }
    while(count<position-1){
        temp=temp->next;
        count++;
    }
        NewNode->next=temp->next;
        temp->next->prev=NewNode;
        temp->next=NewNode;
        NewNode->prev=temp;
    
}
void deleteNode(int position, Node* & head) { 
    // deleting first or start node
    if(position==1){
        Node* temp = head;
        temp->next->prev=NULL;
        head=temp->next;
        temp->next=NULL;
        delete temp;
    }
    else{
        // deleting any middle node or last node 
        Node *curr=head;
        Node *prev=NULL;

        int count=1;
        while(count<position){
            prev=curr;
            curr=curr->next;
            count++;
        }

        prev->next=curr->next;
        curr->next=NULL;
        curr->prev=NULL;

        delete curr;
    }
}

int main() {


    Node* head = NULL;
    Node* tail = NULL;

    print(head);
    //cout << getLength(head) << endl;

    insertAtHead(tail,head, 11);
    print(head);
    cout << "head  " << head -> data << endl;
    cout << "tail  " << tail -> data << endl;

    insertAtHead(tail,head, 13);
    print(head);
    cout << "head  " << head -> data << endl;
    cout << "tail  " << tail -> data << endl;

    insertAtHead(tail,head, 8);
    print(head);
    cout << "head  " << head -> data << endl;
    cout << "tail  " << tail -> data << endl;

    insertAtTail(tail,head, 25);
    print(head);
    cout << "head  " << head -> data << endl;
    cout << "tail  " << tail -> data << endl;

    insertAtPosition(tail, head, 2, 100);
    print(head);
    cout << "head  " << head -> data << endl;
    cout << "tail  " << tail -> data << endl;

    insertAtPosition(tail, head, 1, 101);
    print(head);

    cout << "head  " << head -> data << endl;
    cout << "tail  " << tail -> data << endl;

    insertAtPosition(tail, head, 7, 102);
    print(head);
    cout << "head  " << head -> data << endl;
    cout << "tail  " << tail -> data << endl;

    deleteNode(7, head);
    print(head);
    cout << "head  " << head -> data << endl;
    cout << "tail  " << tail -> data << endl;
    return 0;
}
