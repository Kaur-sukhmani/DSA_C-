// Find triplets that add up to a zero
// https://takeuforward.org/data-structure/3-sum-find-triplets-that-add-up-to-a-zero/
// https://leetcode.com/problems/3sum/
#include <iostream>
#include <vector>
#include <set>
#include <algorithm>

using namespace std;

class Solution {
public:
    // Method 1: Using a set to avoid duplicates
    vector<vector<int>> threeSumUsingSet(vector<int>& nums) {
        set<vector<int>> st;
        int n = nums.size();
        for (int i = 0; i < n; ++i) {
            set<int> hashset;
            for (int j = i + 1; j < n; ++j) {
                int third = -(nums[i] + nums[j]);
                if (hashset.find(third) != hashset.end()) {
                    vector<int> temp = {nums[i], nums[j], third};
                    sort(temp.begin(), temp.end());
                    st.insert(temp);
                }
                hashset.insert(nums[j]);
            }
        }
        return vector<vector<int>>(st.begin(), st.end());
    }

    // Method 2: Two-pointer approach
    vector<vector<int>> threeSumTwoPointer(vector<int>& nums) {
        vector<vector<int>> ans;
        sort(nums.begin(), nums.end());
        int n = nums.size();
        for (int i = 0; i < n; i++) {
            if (i != 0 && nums[i] == nums[i - 1]) continue;

            int j = i + 1, k = n - 1;
            while (j < k) {
                int sum = nums[i] + nums[j] + nums[k];
                if (sum < 0) {
                    j++;
                } else if (sum > 0) {
                    k--;
                } else {
                    ans.push_back({nums[i], nums[j], nums[k]});
                    while (j < k && nums[j] == nums[j + 1]) j++;
                    while (j < k && nums[k] == nums[k - 1]) k--;
                    j++; k--;
                }
            }
        }
        return ans;
    }
};

int main() {
    Solution sol;

    vector<int> nums = {-1, 0, 1, 2, -1, -4};

    // Using Method 1
    vector<vector<int>> result1 = sol.threeSumUsingSet(nums);
    cout << "Method 1 - Triplets that sum up to 0:" << endl;
    for (const auto& triplet : result1) {
        for (int num : triplet) {
            cout << num << " ";
        }
        cout << endl;
    }

    // Using Method 2
    vector<vector<int>> result2 = sol.threeSumTwoPointer(nums);
    cout << "\nMethod 2 - Triplets
