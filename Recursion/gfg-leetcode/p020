// 90. Subsets II
/*/"""// Given an integer array nums that may contain duplicates, return all possible 
subsets
 (the power set).

The solution set must not contain duplicate subsets. Return the solution in any order.

Example 1:
 
Input: nums = [1,2,2]
Output: [[],[1],[1,2],[1,2,2],[2],[2,2]]*/
// https://leetcode.com/problems/subsets-ii/

class Solution {
public:
     void Solve(vector<int>& nums, vector<vector<int>>& ans, vector<int>& output, int index) {
        ans.push_back(output); // Add the current subset to the result regardless
        
        for (int i = index; i < nums.size(); ++i) {
            if (i > index && nums[i] == nums[i - 1]) // Skip duplicates
                continue;
            output.push_back(nums[i]); // Include the current element
            Solve(nums, ans, output, i + 1); // Explore further with the next index
            output.pop_back(); // Backtrack
        }
    }

    vector<vector<int>> subsetsWithDup(vector<int>& nums) {
        vector<vector<int>> ans;
        vector<int> output;
        sort(nums.begin(), nums.end()); // Sort to handle duplicates
        int index = 0;
        Solve(nums, ans, output, index);
        return ans;
    }
};
