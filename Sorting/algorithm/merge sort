// merge sort using recursion 
#include<iostream>
using namespace std;

void merge(int *arr,int start, int end){
    int mid=(start+end)/2;

    int len1=mid-start+1;
    int len2=end-mid;

    int *first = new int[len1];
    int *second = new int[len2];

    int mainArrayIndex=start;
    for(int i=0;i<len1;i++){
        first[i]=arr[mainArrayIndex++];
    }

    mainArrayIndex = mid+1;
    for(int j=0;j<len2;j++){
        second[j]=arr[mainArrayIndex++];
    }

    //merge 2 sorted array
    int index1=0;
    int index2=0;
     mainArrayIndex = start;
    while(index1 < len1 && index2 < len2){
        if(first[len1] < second[len2]){
            arr[mainArrayIndex++] = first[index1];
        }
        else{
            arr[mainArrayIndex++] = second[index2];
        }
    }
    while(index1<len1){
        arr[mainArrayIndex++] = first[index1];
    }
    while(index2<len2){
        arr[mainArrayIndex++] = second[index2];
    }
}

void mergeSort(int *arr,int start, int end){
    if(start >= end){
        return;
    }
    int mid=(start+end)/2;

    // left part solve karna hain
    mergeSort(arr,start,mid);

    // right part solve karna hain 
    mergeSort(arr,mid,end);

    merge(arr,start,end);


}
int main(){
    int arr[]={2,5,6,1,9};
    int n=sizeof(arr)/sizeof(arr[0]);
    mergeSort(arr,0,n-1);
    return 0;
}
