//  Median of Two Sorted Arrays
// https://leetcode.com/problems/median-of-two-sorted-arrays/description/

#include <iostream>
#include <vector>
using namespace std;

class Solution {
public:
    vector<int> mergedArray(vector<int> nums1, vector<int> nums2){
        int i=0;
        int j=0;
        int mergedindex=0;
        vector<int> ans;
        while(i<nums1.size() && j<nums2.size()){
            if(nums1[i]<nums2[j]){
                ans.push_back(nums1[i]);
                i++;
                mergedindex++;
            }
            else{
                ans.push_back(nums2[j]);
                j++;
                mergedindex++;
            }
        }
        while(i<nums1.size())
        {
            ans.push_back(nums1[i]);
                i++;
            mergedindex++;
        }
        while(j<nums2.size()){
                ans.push_back(nums2[j]);
                j++;
                mergedindex++;
            }
        return ans;

    }
    double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2) {
        vector<int> merged = mergedArray(nums1, nums2);
        int totalSize = merged.size();
        double median;
        if (totalSize % 2 == 0) {
            median = (merged[totalSize / 2 - 1] + merged[totalSize / 2]) / 2.0;
        } else {
            median = merged[totalSize / 2];
        }
        return median;
    }
};
int main() {
    Solution sol;

    // Test case 1
    vector<int> nums1_1 = {1, 3};
    vector<int> nums2_1 = {2};
    cout << "Median of merged array [1, 3] and [2]: " 
         << sol.findMedianSortedArrays(nums1_1, nums2_1) << endl;

    // Test case 2
    vector<int> nums1_2 = {1, 2};
    vector<int> nums2_2 = {3, 4};
    cout << "Median of merged array [1, 2] and [3, 4]: " 
         << sol.findMedianSortedArrays(nums1_2, nums2_2) << endl;

    // Add more test cases if necessary

    return 0;
}
