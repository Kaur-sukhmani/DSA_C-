// spiral print 
// https://leetcode.com/problems/spiral-matrix/

#include <iostream>
#include <vector>
using namespace std;

class Solution {
public:
    vector<int> spiralOrder(vector<vector<int>>& matrix) {
        int n=matrix.size();
        int m=matrix[0].size();

        int startingRow=0;
        int endingRow=n-1;
        int startingCol=0;
        int endingCol=m-1;

        int count=0;
        int total=n*m;
        vector<int> ans;
        while(count<total){
            for(int index = startingCol; count<total && index <= endingCol; index++){
                ans.push_back(matrix[startingRow][index]);
                count++;
            }
            startingRow++;

            for(int index = startingRow; count<total && index <= endingRow; index++ ){
                ans.push_back(matrix[index][endingCol]);
                count++;
            }
            endingCol--;

            for(int index=endingCol; count<total && index >= startingCol; index--){
                ans.push_back(matrix[endingRow][index]);
                count++;
            }
            endingRow--;

            for(int index=endingRow ; count<total && index>= startingRow; index--){
                ans.push_back(matrix[index][startingCol]);
                count++;
            }
            startingCol++;
        }
        return ans;
    }
};
int main() {
    Solution sol;

    // Define and initialize a matrix
    vector<vector<int>> matrix = {
        {1, 2, 3},
        {4, 5, 6},
        {7, 8, 9}
    };

    // Call the spiralOrder function
    vector<int> result = sol.spiralOrder(matrix);

    // Print the result
    cout << "Spiral Order: ";
    for (int i = 0; i < result.size(); ++i) {
        cout << result[i] << " ";
    }
    cout << endl;

    return 0;
}
